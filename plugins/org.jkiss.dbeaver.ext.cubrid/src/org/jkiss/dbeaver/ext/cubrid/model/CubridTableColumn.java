/*
 * DBeaver - Universal Database Manager
 * Copyright (C) 2010-2023 DBeaver Corp and others
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package org.jkiss.dbeaver.ext.cubrid.model;

import org.jkiss.code.NotNull;
import org.jkiss.code.Nullable;
import org.jkiss.dbeaver.DBException;
import org.jkiss.dbeaver.model.DBPDataKind;
import org.jkiss.dbeaver.model.DBPDataTypeProvider;
import org.jkiss.dbeaver.model.DBPEvaluationContext;
import org.jkiss.dbeaver.model.DBPNamedObject2;
import org.jkiss.dbeaver.model.DBPOrderedObject;
import org.jkiss.dbeaver.model.DBUtils;
import org.jkiss.dbeaver.model.impl.DBDummyNumberTransformer;
import org.jkiss.dbeaver.model.impl.DBPositiveNumberTransformer;
import org.jkiss.dbeaver.model.impl.jdbc.struct.JDBCColumnKeyType;
import org.jkiss.dbeaver.model.impl.jdbc.struct.JDBCTableColumn;
import org.jkiss.dbeaver.model.impl.jdbc.struct.JDBCTableColumn.ColumnTypeNameListProvider;
import org.jkiss.dbeaver.model.meta.IPropertyValueListProvider;
import org.jkiss.dbeaver.model.meta.IPropertyValueValidator;
import org.jkiss.dbeaver.model.meta.Property;
import org.jkiss.dbeaver.model.meta.PropertyLength;
import org.jkiss.dbeaver.model.struct.DBSDataType;
import org.jkiss.dbeaver.model.struct.rdb.DBSTableColumn;
import org.jkiss.utils.CommonUtils;
import java.util.Set;
import java.util.TreeSet;

/**
 * Cubrid table column
 */
public class CubridTableColumn extends JDBCTableColumn<CubridTableBase> implements DBSTableColumn, DBPNamedObject2, JDBCColumnKeyType, DBPOrderedObject
{	
    private String remarks;
    private int sourceType;
    private boolean autoIncrement;
    private Integer initialValue;
    private Integer incrementValue;
    private String defaultValue;
    private CubridCollation collation;
    private boolean unique;
    private CubridColumnTypeName columnTypeName;
    private boolean shared;
    
    public CubridTableColumn(CubridTableBase table)
    {
        super(table, false);
    }

    public CubridTableColumn(
        CubridTableBase table,
        String columnName,
        String typeName,
        int valueType,
        int sourceType,
        int ordinalPosition,
        long columnSize,
        long charLength,
        Integer scale,
        Integer precision,
        int radix,
        boolean notNull,
        String remarks,
        String defaultValue,
        boolean autoIncrement,
        boolean autoGenerated,
        boolean unique,
        String collation_name,
        Integer initialValue,
        Integer incrementValue,
        boolean shared)
    {
        super(table,
            true,
            columnName,
            typeName,
            valueType,
            ordinalPosition,
            columnSize,
            scale,
            precision,
            notNull,
            autoGenerated || autoIncrement,
            defaultValue);
        this.sourceType = sourceType;
        this.remarks = remarks;
        this.defaultValue = defaultValue;      
        this.unique = unique;
        this.required = notNull;
        
        if(autoIncrement) {
        	this.autoIncrement = autoIncrement;
            this.initialValue = initialValue;
            this.incrementValue = incrementValue;
        	this.shared = false;
        } else {
        	this.autoIncrement = false;
            this.initialValue = null;
            this.incrementValue = null;
        	this.shared = shared;
        }
        for(CubridCollation cbCollation : getDataSource().getCollations()){
            if(cbCollation.getName().equals(collation_name)) {
              this.collation = cbCollation;
              break;
            }
        }
        for(CubridColumnTypeName columnType : getDataSource().getColumnTypeNames()){
            if(columnType.getName().equals(typeName)) {
              this.columnTypeName = columnType;
              break;
            }
        }
    }

    @NotNull
    @Override
    public CubridDataSource getDataSource()
    {
        return getTable().getDataSource();
    }

    public int getSourceType()
    {
        return sourceType;
    }
    
    @Property(viewable = true, hidden = true)
    public int getOrdinalPosition()
    {
        return ordinalPosition;
    }
    
    //Name
    @NotNull
    @Property(viewable = true, editable = true, updatable = true, optional = false, order = 10)
    @Override
    public String getName()
    {
    	return super.getName();
    }

    public void setName(String name)
    {
    	this.name = name;
    }
    
    //Datatype
    @Property(viewable = true, editable = true, updatable = true, listProvider = ColumnTypeNameListProvider.class, order = 19)
    @Override
    public String getTypeName()
    {
        return super.getTypeName();
    }
    
    //Length
    public boolean isSupportLength() {
    	if(super.getDataKind() == DBPDataKind.STRING) {
    		return true;
    	} else {
    	return false;
    	}
    }
    
    @Property(viewable = true, editable = true, updatableExpr = "object.supportLength", order = 40, valueRenderer = DBDummyNumberTransformer.class)
    @Override
    public long getMaxLength()
    {
    	if(super.getDataKind() == DBPDataKind.STRING) {
    		return super.getMaxLength();
    	}
    	else {
            return 0;
    	}
    }
    
    //Scale
    @Override
    @Property(hidden = true)
    public Integer getScale()
    {
        return super.getScale();
    }
    
    //Precision
    @Override
    @Property(hidden = true)
    public Integer getPrecision()
    {
        return super.getPrecision();
    }
    
    //Collation
    @Nullable
    @Property(viewable = true, editable = true, updatable = true, listProvider = CollationListProvider.class, order = 43)
    public CubridCollation getCollation() {
        return collation;
    }

    public void setCollation(CubridCollation collation) {
        this.collation = collation;
    }
    
    //Not Null
    @Property(viewable = true, editable = true, updatable = true, order = 50)
    @Override
    public boolean isRequired()
    {
        return super.isRequired();
    }
   
    public boolean isSupportAutoIncrement() {
    	return typeName.equals("INTEGER");
    }

    //Auto Increment  
    @Property(viewable = true, editable = true, updatable = false, order = 51)
    public boolean isAutoIncrement()
    {
        return autoIncrement;
    }

    public void setAutoIncrement(boolean autoIncrement) 
    {
        this.autoIncrement = autoIncrement;
        if(!autoIncrement) {
        	this.initialValue = null;
        }
    }
    
    @Property(viewable = true, editable = true, updatableExpr = "object.supportAutoIncrement", order = 52)
    public Integer getInitialValue()
    {
    	return initialValue;
    }
    
    public void setInitialValue(Integer initialValue) 
    {
        this.initialValue = initialValue;
    }
    
    @Property(viewable = true, editable = true, updatable = false, order = 53)
    public Integer getIncrementValue()
    {
    	return incrementValue;
    }

    public void setIncrementValue(Integer incrementValue) 
    {
        this.incrementValue = incrementValue;
    }
    
    //Auto Generated
    @Override
    @Property(hidden = true)
    public boolean isAutoGenerated()
    {
        return autoGenerated;
    }
    
    //Key
    @Override
    public JDBCColumnKeyType getKeyType()
    {
        return this;
    }

    @Override
    @Property(viewable = true, editable = true, order = 45)
    public boolean isInUniqueKey()
    {
        return unique;
    }
    
    public void setInUniqueKey(boolean unique) {
    	this.unique = unique;
    }

    @Override
    public boolean isInReferenceKey()
    {
        return false;
    }
    
    //Default Value
	@Override
	@Property(viewable = true, editable = true, updatable = true, order = 70)
	public String getDefaultValue()
	{
		return defaultValue;
	}
	
	public void setDefaultValue(String defaultValue)
	{
		this.defaultValue = defaultValue;
	}
	
	//Shared
	@Property(viewable = true, editable = true, order = 71)
    public boolean isShared()
    {
        return shared;
    }
    
	public void setShared(boolean shared)
    {
        this.shared = shared;
    }
	
	//Description
    @Nullable
    @Override
    @Property(viewable = true, editableExpr = "object.dataSource.metaModel.tableColumnCommentEditable", updatableExpr = "object.dataSource.metaModel.tableColumnCommentEditable", length = PropertyLength.MULTILINE, order = 100)
    public String getDescription()
    {
        return remarks;
    }

    public void setDescription(String remarks) {
        this.remarks = remarks;
    }

    @Override
    public String toString()
    {
        return getTable().getFullyQualifiedName(DBPEvaluationContext.UI) + "." + getName();
    }
    
    public static class CollationListProvider implements IPropertyValueListProvider<CubridTableColumn> {
        
    	@Override
        public boolean allowCustomValue()
        {
            return false;
        }
        @Override
        public Object[] getPossibleValues(CubridTableColumn object)
        {
        	return object.getDataSource().getCollations().toArray();
        }
    }
    
    public static class ColumnTypeNameListProvider implements IPropertyValueListProvider<CubridTableColumn> {

        @Override
        public boolean allowCustomValue()
        {
            return true;
        }

        @Override
        public Object[] getPossibleValues(CubridTableColumn column)
        {
            Set<String> typeNames = new TreeSet<>();
            if (column.getDataSource() instanceof DBPDataTypeProvider) {
                for (CubridColumnTypeName type : ((CubridDataSource)column.getDataSource()).getColumnTypeNames()) {
                    if (!CommonUtils.isEmpty(type.getName()) && Character.isLetter(type.getName().charAt(0))) {
                        typeNames.add(type.getName());
                    }
                }
            }
            return typeNames.toArray(new String[0]);
        }
    }

}